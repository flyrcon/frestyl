<!-- lib/frestyl_web/live/stories_live/edit.html.heex -->

<div class="h-screen flex flex-col bg-gray-50" data-story-id={@story.id} data-editor-mode={@editor_mode}>
  <!-- Top Navigation Bar -->
  <div class="bg-white border-b border-gray-200 px-4 py-3 flex items-center justify-between">
    <!-- Left: Story Info -->
    <div class="flex items-center space-x-4">
      <.link navigate={~p"/stories"} class="text-gray-400 hover:text-gray-600">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
        </svg>
      </.link>
      
      <div>
        <h1 class="text-lg font-semibold text-gray-900 editable-title" 
            contenteditable={@permissions.can_edit}
            phx-blur="update_title"
            phx-value-title={@story.title}>
          <%= @story.title %>
        </h1>
        <div class="flex items-center space-x-3 text-sm text-gray-500">
          <span class="format-badge px-2 py-1 bg-blue-100 text-blue-700 rounded-full">
            <%= @format_config.name %>
          </span>
          <span class="word-count"><%= @word_count %> words</span>
          <span class={[
            "save-status",
            case @save_status do
              :saving -> "text-yellow-600"
              :saved -> "text-green-600"
              :error -> "text-red-600"
            end
          ]}>
            <%= case @save_status do
              :saving -> "Saving..."
              :saved -> "Saved"
              :error -> "Error saving"
            end %>
          </span>
        </div>
      </div>
    </div>
    
    <!-- Center: Collaboration Avatars -->
    <div class="flex items-center space-x-2">
      <%= for collaborator <- @collaborators do %>
        <div class="w-8 h-8 bg-gradient-to-br from-purple-400 to-pink-500 rounded-full flex items-center justify-center text-white text-sm font-medium"
             title={collaborator.name}>
          <%= String.first(collaborator.name) %>
        </div>
      <% end %>
      
      <%= if @permissions.can_invite do %>
        <button class="w-8 h-8 border-2 border-dashed border-gray-300 rounded-full flex items-center justify-center text-gray-400 hover:border-gray-400 hover:text-gray-600"
                phx-click="show_invite_modal">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
          </svg>
        </button>
      <% end %>
    </div>
    
    <!-- Right: Actions -->
    <div class="flex items-center space-x-3">
      <!-- Voice Input Button -->
      <%= if @permissions.can_use_voice do %>
        <button id="voice-input-btn" 
                class="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg"
                phx-click="voice_input_start"
                title="Voice input">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"/>
          </svg>
        </button>
      <% end %>
      
      <!-- AI Assistant Toggle -->
      <%= if @ai_enabled do %>
        <button class={[
          "p-2 rounded-lg",
          if(@show_ai_panel, 
            do: "bg-green-100 text-green-600", 
            else: "text-gray-400 hover:text-gray-600 hover:bg-gray-100")
        ]}
                phx-click="toggle_ai_panel"
                title="AI Assistant">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
          </svg>
        </button>
      <% end %>
      
      <!-- Export Menu -->
      <%= if @permissions.can_export do %>
        <div class="relative" data-dropdown>
          <button class="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg"
                  data-dropdown-toggle
                  title="Export">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
            </svg>
          </button>
          
          <div class="export-menu absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 hidden">
            <%= for format <- get_export_formats(@format_config) do %>
              <button class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 first:rounded-t-lg last:rounded-b-lg"
                      phx-click="export_story"
                      phx-value-format={format.key}>
                <%= format.name %>
              </button>
            <% end %>
          </div>
        </div>
      <% end %>
    </div>
  </div>
  
  <!-- Main Editor Area -->
  <div class="flex-1 flex overflow-hidden">
    <!-- Left Sidebar: Format-Specific Tools -->
    <div class="w-64 bg-white border-r border-gray-200 flex flex-col">
      <!-- Section Navigation -->
      <div class="p-4 border-b border-gray-200">
        <h3 class="text-sm font-medium text-gray-900 mb-3">
          <%= get_section_label(@editor_mode) %>
        </h3>
        
        <div class="space-y-1" id="section-nav">
          <%= for section <- @story.sections do %>
            <div class={[
              "flex items-center justify-between p-2 rounded-lg cursor-pointer",
              if(section.id == @active_section.id, 
                do: "bg-blue-50 text-blue-700", 
                else: "text-gray-700 hover:bg-gray-50")
            ]}
                 phx-click="select_section"
                 phx-value-section-id={section.id}>
              <span class="text-sm"><%= section.title %></span>
              <%= if @permissions.can_edit do %>
                <button class="opacity-0 group-hover:opacity-100 text-gray-400 hover:text-gray-600">
                  <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                  </svg>
                </button>
              <% end %>
            </div>
          <% end %>
          
          <%= if @permissions.can_edit do %>
            <button class="w-full flex items-center justify-center p-2 text-sm text-gray-500 hover:text-gray-700 hover:bg-gray-50 rounded-lg border-2 border-dashed border-gray-300"
                    phx-click="add_section">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
              </svg>
              Add <%= get_section_type(@editor_mode) %>
            </button>
          <% end %>
        </div>
      </div>
      
      <!-- Format-Specific Tools -->
      <div class="flex-1 p-4 overflow-y-auto">
        <%= case @editor_mode do %>
          <% :manuscript -> %>
            <%= render_manuscript_tools(assigns) %>
          <% :business -> %>
            <%= render_business_tools(assigns) %>
          <% :experimental -> %>
            <%= render_experimental_tools(assigns) %>
          <% _ -> %>
            <%= render_standard_tools(assigns) %>
        <% end %>
      </div>
    </div>
    
    <!-- Main Content Editor -->
    <div class="flex-1 flex flex-col">
      <!-- Editor Toolbar -->
      <div class="bg-white border-b border-gray-200 px-6 py-3">
        <div class="flex items-center space-x-4">
          <!-- Formatting Tools -->
          <div class="flex items-center space-x-1">
            <button class="p-1 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded" title="Bold">
              <strong>B</strong>
            </button>
            <button class="p-1 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded" title="Italic">
              <em>I</em>
            </button>
            <button class="p-1 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded" title="Underline">
              <u>U</u>
            </button>
          </div>
          
          <div class="w-px h-6 bg-gray-300"></div>
          
          <!-- Style Dropdown -->
          <select class="text-sm border-0 text-gray-600 focus:ring-0" id="text-style">
            <option>Normal Text</option>
            <option>Heading 1</option>
            <option>Heading 2</option>
            <option>Quote</option>
            <%= if @editor_mode == :manuscript do %>
              <option>Character</option>
              <option>Dialogue</option>
              <option>Action</option>
            <% end %>
          </select>
          
          <div class="w-px h-6 bg-gray-300"></div>
          
          <!-- Focus Mode Toggle -->
          <button class="text-sm text-gray-600 hover:text-gray-900"
                  id="focus-mode-toggle">
            Focus Mode
          </button>
        </div>
      </div>
      
      <!-- Main Text Editor -->
      <div class="flex-1 overflow-hidden">
        <div class="h-full p-6">
          <div class={[
            "w-full max-w-4xl mx-auto",
            case @editor_mode do
              :manuscript -> "font-mono leading-relaxed"
              :business -> "font-sans leading-normal"
              _ -> "font-serif leading-relaxed"
            end
          ]}>
            <!-- Section Title -->
            <input type="text" 
                   class="w-full text-2xl font-bold border-0 focus:ring-0 p-0 mb-6 bg-transparent"
                   value={@active_section.title}
                   phx-blur="update_section_title"
                   phx-value-section-id={@active_section.id}
                   readonly={not @permissions.can_edit} />
            
            <!-- Main Content Area -->
            <div class="relative">
              <div id="main-editor"
                   class={[
                     "min-h-96 focus:outline-none",
                     if(@permissions.can_edit, do: "", else: "cursor-default")
                   ]}
                   contenteditable={@permissions.can_edit}
                   phx-hook="RichTextEditor"
                   data-section-id={@active_section.id}
                   data-format={@story.story_type}>
                <%= raw(@active_section.content || get_placeholder_content(@editor_mode)) %>
              </div>
              
              <!-- Live Collaborator Cursors -->
              <div id="collaborator-cursors"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Right Sidebar: AI & Collaboration -->
    <%= if @show_ai_panel or @show_collaboration_panel do %>
      <div class="w-80 bg-white border-l border-gray-200 flex flex-col">
        <!-- AI Assistant Panel -->
        <%= if @show_ai_panel and @ai_enabled do %>
          <div class="flex-1 p-4">
            <h3 class="text-sm font-medium text-gray-900 mb-4">AI Writing Assistant</h3>
            
            <%= if length(@ai_suggestions) > 0 do %>
              <div class="space-y-3">
                <%= for suggestion <- @ai_suggestions do %>
                  <div class="p-3 bg-green-50 rounded-lg border border-green-200">
                    <p class="text-sm text-green-800 mb-2"><%= suggestion.text %></p>
                    <button class="text-xs text-green-600 hover:text-green-700 font-medium"
                            phx-click="apply_ai_suggestion"
                            phx-value-suggestion={suggestion.id}
                            phx-value-section-id={@active_section.id}>
                      Apply suggestion
                    </button>
                  </div>
                <% end %>
              </div>
            <% else %>
              <div class="text-center py-8">
                <svg class="w-12 h-12 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                </svg>
                <p class="text-sm text-gray-500">Start writing to get AI suggestions</p>
              </div>
            <% end %>
          </div>
        <% end %>
      </div>
    <% end %>
  </div>
</div>

<!-- Voice Input Modal -->
<div id="voice-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
  <div class="bg-white rounded-xl p-6 max-w-sm w-full mx-4">
    <div class="text-center">
      <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
        <div class="w-4 h-4 bg-red-500 rounded-full animate-pulse"></div>
      </div>
      <h3 class="text-lg font-medium text-gray-900 mb-2">Listening...</h3>
      <p class="text-sm text-gray-500 mb-4">Speak clearly into your microphone</p>
      <button id="stop-recording" 
              class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700">
        Stop Recording
      </button>
    </div>
  </div>
</div>

<script>
// Voice Input Handler
window.addEventListener('phx:start_voice_recording', () => {
  document.getElementById('voice-modal').classList.remove('hidden');
  document.getElementById('voice-modal').classList.add('flex');
  
  if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    
    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = 'en-US';
    
    let finalTranscript = '';
    
    recognition.onresult = (event) => {
      let interimTranscript = '';
      
      for (let i = event.resultIndex; i < event.results.length; i++) {
        const transcript = event.results[i][0].transcript;
        if (event.results[i].isFinal) {
          finalTranscript += transcript;
        } else {
          interimTranscript += transcript;
        }
      }
    };
    
    recognition.onend = () => {
      document.getElementById('voice-modal').classList.add('hidden');
      document.getElementById('voice-modal').classList.remove('flex');
      
      if (finalTranscript.trim()) {
        window.liveSocket.pushEvent('voice_input_complete', {
          transcript: finalTranscript,
          section_id: document.getElementById('main-editor').dataset.sectionId
        });
      }
    };
    
    recognition.start();
    
    document.getElementById('stop-recording').onclick = () => {
      recognition.stop();
    };
  }
});

// Auto-save functionality
let saveTimeout;
document.getElementById('main-editor')?.addEventListener('input', (e) => {
  clearTimeout(saveTimeout);
  saveTimeout = setTimeout(() => {
    window.liveSocket.pushEvent('content_changed', {
      content: e.target.innerHTML,
      section_id: e.target.dataset.sectionId
    });
  }, 1000);
});

// Dropdown functionality
document.querySelectorAll('[data-dropdown-toggle]').forEach(button => {
  button.addEventListener('click', (e) => {
    e.stopPropagation();
    const dropdown = button.parentElement.querySelector('.export-menu');
    dropdown.classList.toggle('hidden');
  });
});

// Close dropdowns when clicking outside
document.addEventListener('click', () => {
  document.querySelectorAll('.export-menu').forEach(menu => {
    menu.classList.add('hidden');
  });
});

// Focus mode toggle
document.getElementById('focus-mode-toggle')?.addEventListener('click', () => {
  document.body.classList.toggle('focus-mode');
});

// Format-specific keyboard shortcuts
document.addEventListener('keydown', (e) => {
  if (e.ctrlKey || e.metaKey) {
    switch(e.key) {
      case 's':
        e.preventDefault();
        // Trigger manual save
        window.liveSocket.pushEvent('manual_save', {});
        break;
      case '/':
        e.preventDefault();
        // Toggle AI panel
        window.liveSocket.pushEvent('toggle_ai_panel', {});
        break;
    }
  }
});
</script>

<style>
.focus-mode .w-64,
.focus-mode .w-80 {
  display: none;
}

.focus-mode .flex-1 {
  max-width: none;
}

.editable-title:focus {
  outline: none;
  border-bottom: 2px solid #3B82F6;
}

/* Format-specific styling */
[data-editor-mode="manuscript"] #main-editor {
  font-family: 'Courier New', monospace;
  line-height: 2;
}

[data-editor-mode="screenplay"] #main-editor {
  font-family: 'Courier New', monospace;
  line-height: 1.5;
}

[data-editor-mode="business"] #main-editor {
  font-family: system-ui, -apple-system, sans-serif;
  line-height: 1.6;
}

/* Collaboration cursors */
.collaborator-cursor {
  position: absolute;
  pointer-events: none;
  z-index: 10;
}

.collaborator-cursor::before {
  content: attr(data-user);
  position: absolute;
  top: -20px;
  left: 0;
  background: #3B82F6;
  color: white;
  font-size: 11px;
  padding: 2px 6px;
  border-radius: 4px;
  white-space: nowrap;
}

.collaborator-cursor::after {
  content: '';
  position: absolute;
  width: 2px;
  height: 20px;
  background: #3B82F6;
  animation: blink 1s infinite;
}

@keyframes blink {
  0%, 50% { opacity: 1; }
  51%, 100% { opacity: 0; }
}
</style>