<!-- Enhanced Portfolio View - Hero Section -->
<div class="w-full" id="portfolio-container">
  
  <!-- CREATIVE TEMPLATE HERO -->
  <%= if @template_theme == :creative do %>
    <div class="relative min-h-screen overflow-hidden">
      <!-- Dynamic Background with Animated Elements -->
      <div class="absolute inset-0 bg-gradient-to-br from-purple-600 via-blue-600 to-indigo-800"></div>
      <div class="absolute inset-0">
        <div class="absolute top-20 left-10 w-64 h-64 bg-yellow-400/10 rounded-full blur-3xl animate-pulse"></div>
        <div class="absolute bottom-20 right-10 w-80 h-80 bg-pink-400/10 rounded-full blur-3xl animate-pulse delay-1000"></div>
        <div class="absolute top-1/2 right-20 w-32 h-32 bg-cyan-400/10 rounded-full blur-2xl animate-bounce delay-500"></div>
        <div class="absolute bottom-1/4 left-1/4 w-48 h-48 bg-purple-400/10 rounded-full blur-2xl animate-pulse delay-2000"></div>
      </div>
      
      <!-- Main Content Container -->
      <div class="relative z-10 w-full px-6 lg:px-8 min-h-screen flex items-center">
        <div class="w-full py-20">
          
          <!-- Status Banner -->
          <div class="flex justify-center mb-8">
            <div class="inline-flex items-center space-x-4 bg-white/10 backdrop-blur-xl rounded-full px-8 py-4 border border-white/20 shadow-2xl">
              <div class="w-4 h-4 bg-green-400 rounded-full animate-pulse shadow-lg"></div>
              <span class="text-white font-bold text-lg tracking-wide">LIVE PORTFOLIO</span>
              <%= if @is_shared_view do %>
                <div class="h-6 w-px bg-white/30"></div>
                <div class="flex items-center space-x-2">
                  <svg class="w-4 h-4 text-white/80" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                  </svg>
                  <span class="text-white/90 text-sm font-semibold">
                    Viewed by <%= Map.get(@share, "name", "Guest") %>
                  </span>
                </div>
              <% end %>
            </div>
          </div>

          <!-- Hero Content Grid -->
          <div class="grid lg:grid-cols-12 gap-12 items-start max-w-7xl mx-auto">
            
            <!-- Video Introduction - Prominent Left Column -->
            <div class="lg:col-span-5 order-1">
              <%= if assigns[:intro_video] && @intro_video do %>
                <!-- Featured Video Player -->
                <div class="relative group">
                  <div class="bg-white/10 backdrop-blur-xl rounded-3xl p-6 border border-white/20 shadow-2xl transform hover:scale-[1.02] transition-all duration-500">
                    <div class="relative rounded-2xl overflow-hidden shadow-2xl">
                      <video 
                        id="hero-intro-video"
                        class="w-full h-80 lg:h-96 object-cover transition-transform duration-700 group-hover:scale-105"
                        controls
                        poster={get_video_thumbnail(@intro_video)}
                        preload="metadata"
                        muted
                      >
                        <source src={get_media_url(@intro_video)} type="video/mp4">
                        Your browser does not support the video tag.
                      </video>
                      
                      <!-- Video Overlay Info -->
                      <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/90 via-black/20 to-transparent p-6">
                        <div class="flex items-center space-x-3 mb-2">
                          <div class="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center">
                            <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                              <path d="M6.3 2.841A1.5 1.5 0 004 4.11V15.89a1.5 1.5 0 002.3 1.269l9.344-5.89a1.5 1.5 0 000-2.538L6.3 2.84z"/>
                            </svg>
                          </div>
                          <span class="text-white font-bold text-lg">Personal Introduction</span>
                        </div>
                        <p class="text-white/90 text-sm">Get to know me beyond the resume</p>
                      </div>
                    </div>
                  </div>
                </div>
                
                <!-- Video Stats Cards -->
                <div class="grid grid-cols-3 gap-4 mt-6">
                  <div class="bg-white/10 backdrop-blur-xl rounded-xl p-4 border border-white/20 text-center">
                    <div class="text-2xl font-black text-yellow-400">2:34</div>
                    <div class="text-white/70 text-xs font-medium">Duration</div>
                  </div>
                  <div class="bg-white/10 backdrop-blur-xl rounded-xl p-4 border border-white/20 text-center">
                    <div class="text-2xl font-black text-pink-400">1.2K</div>
                    <div class="text-white/70 text-xs font-medium">Views</div>
                  </div>
                  <div class="bg-white/10 backdrop-blur-xl rounded-xl p-4 border border-white/20 text-center">
                    <div class="text-2xl font-black text-cyan-400">98%</div>
                    <div class="text-white/70 text-xs font-medium">Watched</div>
                  </div>
                </div>
                
              <% else %>
                <!-- Video Placeholder with Compelling CTA -->
                <div class="relative group">
                  <div class="bg-white/10 backdrop-blur-xl rounded-3xl p-6 border border-white/20 shadow-2xl">
                    <div class="relative rounded-2xl overflow-hidden bg-gradient-to-br from-purple-600/50 to-indigo-800/50 h-80 lg:h-96 flex items-center justify-center">
                      <div class="text-center p-8">
                        <div class="w-24 h-24 mx-auto mb-6 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm">
                          <svg class="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                          </svg>
                        </div>
                        <h4 class="text-2xl font-bold text-white mb-4">Personal Video Introduction</h4>
                        <p class="text-white/80 text-lg leading-relaxed max-w-sm mx-auto">
                          Stand out with a personal video that shows your personality and passion
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              <% end %>
            </div>
            
            <!-- Professional Identity & Portfolio Info - Right Column -->
            <div class="lg:col-span-7 order-2 space-y-8">
              
              <!-- Main Title & Description -->
              <div class="text-center lg:text-left">
                <h1 class="text-6xl lg:text-8xl font-black tracking-tight leading-none mb-6">
                  <span class="block bg-gradient-to-r from-white via-yellow-200 to-pink-200 bg-clip-text text-transparent">
                    <%= @portfolio.title %>
                  </span>
                </h1>
                
                <%= if @portfolio.description do %>
                  <p class="text-2xl lg:text-3xl text-white/90 leading-relaxed font-light max-w-4xl">
                    <%= @portfolio.description %>
                  </p>
                <% end %>
              </div>
              
              <!-- Professional Identity Card -->
              <div class="bg-white/10 backdrop-blur-xl rounded-3xl p-8 border border-white/20 shadow-2xl">
                <div class="flex items-center space-x-6 mb-8">
                  <div class="w-20 h-20 bg-gradient-to-br from-yellow-400 to-pink-500 rounded-3xl flex items-center justify-center shadow-2xl">
                    <span class="text-3xl font-black text-white">
                      <%= String.first(@owner.name || @owner.username || "U") %>
                    </span>
                  </div>
                  <div>
                    <h2 class="text-3xl font-black text-white">
                      <%= Map.get(@owner, :full_name) || Map.get(@owner, :name) || "Portfolio Owner" %>
                    </h2>
                    <p class="text-white/70 text-xl font-medium">@<%= @owner.username %></p>
                    <div class="flex items-center mt-2 space-x-4">
                      <div class="flex items-center text-white/60 text-sm">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                        </svg>
                        Joined <%= Calendar.strftime(@portfolio.inserted_at, "%B %Y") %>
                      </div>
                      <div class="flex items-center text-white/60 text-sm">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"/>
                        </svg>
                        Updated <%= Calendar.strftime(@portfolio.updated_at, "%b %d") %>
                      </div>
                    </div>
                  </div>
                </div>
                
                <!-- Portfolio Stats Grid -->
                <div class="grid grid-cols-2 lg:grid-cols-4 gap-4">
                  <div class="bg-white/10 rounded-2xl p-4 border border-white/10 text-center group hover:bg-white/20 transition-all duration-300">
                    <div class="text-3xl font-black text-yellow-400 group-hover:scale-110 transition-transform">
                      <%= length(@sections) %>
                    </div>
                    <div class="text-white/70 text-sm font-medium">Sections</div>
                  </div>
                  <div class="bg-white/10 rounded-2xl p-4 border border-white/10 text-center group hover:bg-white/20 transition-all duration-300">
                    <div class="text-3xl font-black text-pink-400 group-hover:scale-110 transition-transform">
                      <%= @sections |> Enum.map(fn s -> length(Map.get(s, :media_files, [])) end) |> Enum.sum() %>
                    </div>
                    <div class="text-white/70 text-sm font-medium">Projects</div>
                  </div>
                  <div class="bg-white/10 rounded-2xl p-4 border border-white/10 text-center group hover:bg-white/20 transition-all duration-300">
                    <div class="text-3xl font-black text-cyan-400 group-hover:scale-110 transition-transform">2.4K</div>
                    <div class="text-white/70 text-sm font-medium">Views</div>
                  </div>
                  <div class="bg-white/10 rounded-2xl p-4 border border-white/10 text-center group hover:bg-white/20 transition-all duration-300">
                    <div class="text-3xl font-black text-green-400 group-hover:scale-110 transition-transform">94%</div>
                    <div class="text-white/70 text-sm font-medium">Response</div>
                  </div>
                </div>
              </div>
              
              <!-- Action Buttons -->
              <div class="flex flex-wrap gap-4 justify-center lg:justify-start">
                <button onclick="document.getElementById('portfolio-sections').scrollIntoView({behavior: 'smooth'})"
                        class="group inline-flex items-center px-8 py-4 bg-gradient-to-r from-yellow-400 to-pink-500 text-black font-bold rounded-2xl hover:shadow-2xl transition-all duration-300 transform hover:scale-105 shadow-xl">
                  <span class="text-lg">Explore My Work</span>
                  <svg class="ml-3 w-6 h-6 group-hover:translate-x-2 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
                  </svg>
                </button>
                
                <%= if not @is_shared_view do %>
                  <button onclick="sharePortfolio()" 
                          class="group inline-flex items-center px-8 py-4 bg-white/10 text-white font-bold rounded-2xl border border-white/20 hover:bg-white/20 transition-all duration-300 backdrop-blur-xl shadow-xl">
                    <svg class="mr-3 w-6 h-6 group-hover:rotate-12 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"/>
                    </svg>
                    <span class="text-lg">Share Portfolio</span>
                  </button>
                <% end %>
                
                <%= if @portfolio.allow_resume_export do %>
                  <button phx-click="export_resume" 
                          disabled={assigns[:exporting_resume] || false}
                          class="group inline-flex items-center px-8 py-4 bg-white/10 text-white font-bold rounded-2xl border border-white/20 hover:bg-white/20 transition-all duration-300 backdrop-blur-xl shadow-xl disabled:opacity-50">
                    <%= if assigns[:exporting_resume] do %>
                      <svg class="mr-3 w-6 h-6 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                      </svg>
                      <span class="text-lg">Generating PDF...</span>
                    <% else %>
                      <svg class="mr-3 w-6 h-6 group-hover:scale-110 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                      </svg>
                      <span class="text-lg">Download Resume</span>
                    <% end %>
                  </button>
                <% end %>
              </div>
            </div>
          </div>
          
          <!-- Scroll Indicator -->
          <div class="flex justify-center mt-16">
            <button onclick="document.getElementById('portfolio-sections').scrollIntoView({behavior: 'smooth'})"
                    class="group flex flex-col items-center text-white/70 hover:text-white transition-all duration-300">
              <span class="text-sm font-bold mb-4 tracking-wider">EXPLORE PORTFOLIO</span>
              <div class="w-8 h-12 border-2 border-white/30 rounded-full flex justify-center group-hover:border-white/60 transition-colors">
                <div class="w-1 h-4 bg-white/50 rounded-full mt-2 animate-bounce group-hover:bg-white/80"></div>
              </div>
            </button>
          </div>
        </div>
      </div>
    </div>
  <% end %>
</div>

<!-- CORPORATE TEMPLATE HERO -->
<%= if @template_theme == :corporate do %>
  <div class="min-h-screen bg-gradient-to-br from-gray-50 via-white to-blue-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 xl:px-12 py-20">
      <div class="grid lg:grid-cols-12 gap-12">

        <div class="lg:col-span-5">
          <%= if assigns[:intro_video] && @intro_video do %>
            <div class="bg-white rounded-3xl shadow-2xl overflow-hidden border border-gray-200">
              <div class="h-2 bg-gradient-to-r from-blue-600 to-indigo-600"></div>
              <div class="p-8">
                <div class="relative rounded-2xl overflow-hidden shadow-xl group">
                  <video
                    id="corporate-intro-video"
                    class="w-full h-80 object-cover transition-transform duration-500 group-hover:scale-105"
                    controls
                    poster={get_video_thumbnail(@intro_video)}
                    preload="metadata"
                  >
                    <source src={get_media_url(@intro_video)} type="video/mp4">
                  </video>

                  <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-6">
                    <div class="flex items-center space-x-3">
                      <div class="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                        <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                          <path d="M6.3 2.841A1.5 1.5 0 004 4.11V15.89a1.5 1.5 0 002.3 1.269l9.344-5.89a1.5 1.5 0 000-2.538L6.3 2.84z"/>
                        </svg>
                      </div>
                      <span class="text-white font-bold">Professional Introduction</span>
                    </div>
                  </div>
                </div>

                <div class="grid grid-cols-3 gap-4 mt-6">
                  <div class="text-center p-4 bg-blue-50 rounded-xl">
                    <div class="text-2xl font-bold text-blue-600">2:45</div>
                    <div class="text-blue-600/70 text-sm font-medium">Length</div>
                  </div>
                  <div class="text-center p-4 bg-indigo-50 rounded-xl">
                    <div class="text-2xl font-bold text-indigo-600">842</div>
                    <div class="text-indigo-600/70 text-sm font-medium">Views</div>
                  </div>
                  <div class="text-center p-4 bg-purple-50 rounded-xl">
                    <div class="text-2xl font-bold text-purple-600">96%</div>
                    <div class="text-purple-600/70 text-sm font-medium">Completion</div>
                  </div>
                </div>
              </div>
            </div>
          <% else %>
            <div class="bg-white rounded-3xl shadow-2xl overflow-hidden border border-gray-200">
              <div class="h-2 bg-gradient-to-r from-blue-600 to-indigo-600"></div>
              <div class="p-8">
                <div class="relative rounded-2xl overflow-hidden bg-gradient-to-br from-blue-600 to-indigo-700 h-80 flex items-center justify-center">
                  <div class="text-center text-white p-8">
                    <div class="w-20 h-20 mx-auto mb-6 bg-white/20 rounded-full flex items-center justify-center">
                      <svg class="w-10 h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                      </svg>
                    </div>
                    <h4 class="text-2xl font-bold mb-3">Video Introduction</h4>
                    <p class="text-blue-100 leading-relaxed">A personalized introduction showcasing professional expertise and communication skills.</p>
                  </div>
                </div>
              </div>
            </div>
          <% end %>
        </div>

        <div class="lg:col-span-7 space-y-8">

          <%= if @is_shared_view do %>
            <div class="bg-white rounded-2xl shadow-lg p-6 border border-gray-200">
              <div class="flex items-center space-x-4">
                <div class="w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center">
                  <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                  </svg>
                </div>
                <div>
                  <h3 class="font-bold text-gray-900">Shared Portfolio View</h3>
                  <p class="text-gray-600 text-sm">Currently being reviewed by <span class="font-semibold"><%= Map.get(@share, "name", "Guest") %></span></p>
                </div>
              </div>
            </div>
          <% end %>

          <div>
            <h1 class="text-5xl lg:text-6xl font-black text-gray-900 leading-tight mb-6">
              <%= @portfolio.title %>
            </h1>
            <%= if @portfolio.description do %>
              <p class="text-xl lg:text-2xl text-gray-600 leading-relaxed font-light">
                <%= @portfolio.description %>
              </p>
            <% end %>
          </div>

          <div class="bg-white rounded-3xl shadow-xl p-8 border border-gray-200">
            <div class="flex items-center space-x-6 mb-8">
              <div class="w-16 h-16 bg-blue-600 rounded-2xl flex items-center justify-center shadow-lg">
                <span class="text-2xl font-bold text-white">
                  <%= String.first(@owner.name || @owner.username || "U") %>
                </span>
              </div>
              <div>
                <h2 class="text-2xl font-bold text-gray-900">
                  <%= Map.get(@owner, :full_name) || Map.get(@owner, :name) || "Portfolio Owner" %>
                </h2>
                <p class="text-gray-600 text-lg">@<%= @owner.username %></p>
                <div class="flex items-center mt-2 space-x-4">
                  <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    Professional
                  </span>
                  <span class="text-gray-500 text-sm">Active Portfolio</span>
                </div>
              </div>
            </div>

            <div class="grid grid-cols-2 lg:grid-cols-4 gap-6">
              <div class="text-center p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors">
                <div class="text-3xl font-bold text-blue-600"><%= length(@sections) %></div>
                <div class="text-gray-600 text-sm font-medium">Sections</div>
              </div>
              <div class="text-center p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors">
                <div class="text-3xl font-bold text-indigo-600">
                  <%= @sections |> Enum.map(fn s -> length(Map.get(s, :media_files, [])) end) |> Enum.sum() %>
                </div>
                <div class="text-gray-600 text-sm font-medium">Projects</div>
              </div>
              <div class="text-center p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors">
                <div class="text-3xl font-bold text-purple-600">1.8K</div>
                <div class="text-gray-600 text-sm font-medium">Views</div>
              </div>
              <div class="text-center p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors">
                <div class="text-3xl font-bold text-green-600">92%</div>
                <div class="text-gray-600 text-sm font-medium">Response</div>
              </div>
            </div>
          </div>

          <div class="flex flex-wrap gap-4">
            <button onclick="document.getElementById('portfolio-sections').scrollIntoView({behavior: 'smooth'})"
                    class="inline-flex items-center px-8 py-4 bg-blue-600 text-white font-bold rounded-xl hover:bg-blue-700 transition-all duration-300 shadow-lg hover:shadow-xl">
              <span class="text-lg">View Portfolio</span>
              <svg class="ml-3 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"/>
              </svg>
            </button>

            <%= if not @is_shared_view do %>
              <button onclick="sharePortfolio()"
                      class="inline-flex items-center px-8 py-4 bg-gray-100 text-gray-700 font-bold rounded-xl hover:bg-gray-200 transition-all duration-300 border border-gray-300">
                <svg class="mr-3 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"/>
                </svg>
                <span class="text-lg">Share</span>
              </button>
            <% end %>

            <%= if @portfolio.allow_resume_export do %>
              <button phx-click="export_resume"
                      disabled={assigns[:exporting_resume] || false}
                      class="inline-flex items-center px-8 py-4 bg-indigo-600 text-white font-bold rounded-xl hover:bg-indigo-700 transition-all duration-300 shadow-lg disabled:opacity-50">
                <%= if assigns[:exporting_resume] do %>
                  <svg class="mr-3 w-5 h-5 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                  </svg>
                  <span class="text-lg">Generating...</span>
                <% else %>
                  <svg class="mr-3 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                  </svg>
                  <span class="text-lg">Download Resume</span>
                <% end %>
              </button>
            <% end %>
          </div>
        </div>
      </div>

      <div class="mt-20">
        <div class="text-center mb-12">
          <h2 class="text-3xl font-bold text-gray-900 mb-4">Portfolio Overview</h2>
          <p class="text-xl text-gray-600">Comprehensive professional experience and expertise</p>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          <%= for section <- Enum.take(@sections, 6) do %>
            <%= if Map.get(section, :visible, true) do %>
              <div class="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden border border-gray-200 group cursor-pointer"
                  onclick={"document.getElementById('section-#{section.id}').scrollIntoView({behavior: 'smooth'})"}>
                <div class="h-2 bg-gradient-to-r from-blue-600 to-indigo-600"></div>
                <div class="p-6">
                  <div class="flex items-start justify-between mb-4">
                    <div class="w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center group-hover:bg-blue-200 transition-colors">
                      <%= case section.section_type do %>
                        <% :experience -> %>
                          <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 012 2v6a2 2 0 01-2 2H8a2 2 0 01-2-2V8a2 2 0 012-2h8zM16 10h.01"/>
                          </svg>
                        <% :skills -> %>
                          <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
                          </svg>
                        <% :featured_project -> %>
                          <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                          </svg>
                        <% :education -> %>
                          <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14l9-5-9-5-9 5 9 5zm0 0v5m0-5h-.01M12 14l-9 5m9-5l9 5m0 0l-9 5-9-5m9-5l-9 5"/>
                          </svg>
                        <% :awards -> %>
                          <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                          </svg>
                        <% :certifications -> %>
                          <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M12 12v.01"/>
                          </svg>
                        <% :publications -> %>
                          <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.206 5 7.5 5A3.5 3.5 0 004 8.5c0 2.155 1.572 3.923 3.654 4.382C10.748 13.993 12 15.5 12 17.255m0-13C13.168 5.477 14.794 5 16.5 5A3.5 3.5 0 0120 8.5c0 2.155-1.572 3.923-3.654 4.382C13.252 13.993 12 15.5 12 17.255m0 0H9.5a3.5 3.5 0 01-3.5-3.5V11a2 2 0 00-2-2m-2 0H5a2 2 0 002-2V7a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                          </svg>
                        <% :languages -> %>
                          <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 018 12c0-3.183 2.579-5.755 5.755-5.755S19.51 8.817 19.51 12A18.022 18.022 0 0116 14.5m-8 0v7m-4-7h4m4 0v7m-4-7H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M12 12v.01"/>
                          </svg>
                        <% :custom -> %>
                          <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                          </svg>
                        <% _ -> %>
                          <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zm10 0a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zm10 0a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"/>
                          </svg>
                      <% end %>
                    </div>
                    <span class="text-sm font-semibold text-gray-500">
                      <%= Map.get(section, :media_files, []) |> length() %> items
                    </span>
                  </div>
                  <h3 class="text-xl font-bold text-gray-900 mb-2 group-hover:text-blue-700 transition-colors">
                    <%= section.title %>
                  </h3>
                  <p class="text-gray-600 text-sm mb-4">
                    <%= get_in(section.content, ["summary"]) || get_in(section.content, ["description"]) || "No description available" %>
                  </p>
                  <button class="text-blue-600 font-semibold text-sm inline-flex items-center group-hover:underline">
                    View Section
                    <svg class="ml-2 w-4 h-4 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                    </svg>
                  </button>
                </div>
              </div>
            <% end %>
          <% end %>
        </div>
      </div>
    </div>
  </div>
<% end %>

<!-- MINIMALIST TEMPLATE HERO -->
<%= if @template_theme == :minimalist do %>
  <div class="w-full px-6 lg:px-8 py-16 lg:py-24 min-h-screen">
    
    <!-- Sharing Status -->
    <%= if @is_shared_view do %>
      <div class="text-center mb-12">
        <div class="inline-flex items-center space-x-3 bg-gray-100 rounded-full px-6 py-3">
          <div class="w-3 h-3 bg-gray-400 rounded-full"></div>
          <span class="text-gray-600 font-medium text-sm">
            Portfolio shared with <%= Map.get(@share, "name", "you") %>
          </span>
        </div>
      </div>
    <% end %>
    
    <!-- Hero Content -->
    <div class="text-center mb-20">
      <!-- Main Title -->
      <h1 class="text-6xl lg:text-8xl font-light text-gray-900 mb-12 tracking-tight leading-none">
        <%= @portfolio.title %>
      </h1>
      
      <!-- Description -->
      <%= if @portfolio.description do %>
        <div class="max-w-4xl mx-auto mb-12">
          <p class="text-2xl lg:text-3xl text-gray-600 leading-relaxed font-light">
            <%= @portfolio.description %>
          </p>
        </div>
      <% end %>
      
      <!-- Professional Identity -->
      <div class="flex flex-col lg:flex-row items-center justify-center space-y-8 lg:space-y-0 lg:space-x-12 mb-16">
        <div class="flex items-center space-x-6">
          <div class="w-20 h-20 bg-gray-900 rounded-full flex items-center justify-center shadow-lg">
            <span class="text-2xl font-medium text-white">
              <%= String.first(@owner.name || @owner.username || "U") %>
            </span>
          </div>
          <div class="text-left">
            <h2 class="font-medium text-gray-900 text-2xl">
              <%= Map.get(@owner, :full_name) || Map.get(@owner, :name) || "Portfolio Owner" %>
            </h2>
            <p class="text-gray-500 text-lg">@<%= @owner.username %></p>
          </div>
        </div>
        
        <!-- Minimal Stats -->
        <div class="flex items-center space-x-12 text-center">
          <div>
            <div class="text-3xl font-light text-gray-900"><%= length(@sections) %></div>
            <div class="text-gray-500 text-sm">Sections</div>
          </div>
          <div class="w-px h-12 bg-gray-200"></div>
          <div>
            <div class="text-3xl font-light text-gray-900">
              <%= @sections |> Enum.map(fn s -> length(Map.get(s, :media_files, [])) end) |> Enum.sum() %>
            </div>
            <div class="text-gray-500 text-sm">Projects</div>
          </div>
          <div class="w-px h-12 bg-gray-200"></div>
          <div>
            <div class="text-3xl font-light text-gray-900">1.2K</div>
            <div class="text-gray-500 text-sm">Views</div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Video Introduction - Minimalist Style -->
    <div class="mb-20">
      <%= if assigns[:intro_video] && @intro_video do %>
        <div class="max-w-4xl mx-auto">
          <div class="bg-white rounded-2xl shadow-xl overflow-hidden border border-gray-200">
            <div class="relative group">
              <video 
                class="w-full h-80 lg:h-96 object-cover"
                controls
                poster={get_video_thumbnail(@intro_video)}
                preload="metadata"
              >
                <source src={get_media_url(@intro_video)} type="video/mp4">
              </video>
              
              <!-- Minimal video info -->
              <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-8">
                <div class="flex items-center justify-between text-white">
                  <div>
                    <h3 class="font-medium text-lg">Personal Introduction</h3>
                    <p class="text-white/80 text-sm">Get to know <%= @owner.name %></p>
                  </div>
                  <div class="text-right text-sm">
                    <div class="text-white/80">Duration: 2:34</div>
                    <div class="text-white/80">842 views</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Video caption -->
          <p class="text-center text-gray-500 text-sm mt-6 font-light">
            Personal introduction by <%= @owner.name %>
          </p>
        </div>
      <% else %>
        <!-- Video placeholder -->
        <div class="max-w-4xl mx-auto">
          <div class="bg-gray-100 rounded-2xl h-80 lg:h-96 flex items-center justify-center">
            <div class="text-center text-gray-400">
              <svg class="w-20 h-20 mx-auto mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"/>
              </svg>
              <h4 class="text-xl font-light text-gray-600 mb-2">Video Introduction</h4>
              <p class="text-gray-500">A personal introduction showcasing professional expertise</p>
            </div>
          </div>
        </div>
      <% end %>
    </div>
    
    <!-- Actions -->
    <div class="flex justify-center space-x-6 mb-20">
      <button onclick="document.getElementById('portfolio-sections').scrollIntoView({behavior: 'smooth'})"
              class="inline-flex items-center px-10 py-4 bg-gray-900 text-white font-medium rounded-xl hover:bg-gray-800 transition-all duration-300 shadow-lg">
        <span class="text-lg">View Portfolio</span>
        <svg class="ml-3 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"/>
        </svg>
      </button>
      
      <%= if not @is_shared_view do %>
        <button onclick="sharePortfolio()" 
                class="inline-flex items-center px-10 py-4 bg-gray-100 text-gray-700 font-medium rounded-xl hover:bg-gray-200 transition-all duration-300 border border-gray-300">
          <svg class="mr-3 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"/>
          </svg>
          <span class="text-lg">Share</span>
        </button>
      <% end %>
      
      <%= if @portfolio.allow_resume_export do %>
        <button phx-click="export_resume" 
                disabled={assigns[:exporting_resume] || false}
                class="inline-flex items-center px-10 py-4 bg-gray-600 text-white font-medium rounded-xl hover:bg-gray-700 transition-all duration-300 shadow-lg disabled:opacity-50">
          <%= if assigns[:exporting_resume] do %>
            <svg class="mr-3 w-5 h-5 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
            </svg>
            <span class="text-lg">Generating...</span>
          <% else %>
            <svg class="mr-3 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
            </svg>
            <span class="text-lg">Resume PDF</span>
          <% end %>
        </button>
      <% end %>
    </div>
  </div>
<% end %>

<!-- ENHANCED PORTFOLIO SECTIONS with Dashboard Layouts -->
<div id="portfolio-sections" class="relative w-full">
  <div class={[
    "w-full min-h-screen",
    case @template_theme do
      :creative -> "bg-gradient-to-br from-purple-600 via-blue-600 to-indigo-800"
      :corporate -> "bg-gradient-to-br from-gray-50 to-blue-50" 
      :minimalist -> "bg-white"
    end
  ]}>
    
    <div class="w-full max-w-[1600px] mx-auto px-4 sm:px-6 lg:px-8 xl:px-12 py-20">
      
      <!-- Section Header -->
      <div class="text-center mb-16">
        <h2 class={[
          "text-4xl lg:text-5xl font-black mb-6",
          case @template_theme do
            :creative -> "text-white"
            :corporate -> "text-gray-900"
            :minimalist -> "text-gray-900"
          end
        ]}>
          Portfolio Sections
        </h2>
        
        <p class={[
          "text-xl lg:text-2xl font-light max-w-3xl mx-auto mb-8",
          case @template_theme do
            :creative -> "text-white/80"
            :corporate -> "text-gray-600"  
            :minimalist -> "text-gray-600"
          end
        ]}>
          Explore my professional journey, skills, and featured work
        </p>
        
        <!-- Navigation Pills -->
        <div class="flex flex-wrap justify-center gap-3">
          <%= for section <- @sections do %>
            <%= if Map.get(section, :visible, true) do %>
              <button 
                onclick={"document.getElementById('section-#{section.id}').scrollIntoView({behavior: 'smooth'});"}
                class={[
                  "px-6 py-3 rounded-full text-sm font-semibold transition-all duration-300 hover:scale-105 shadow-lg",
                  case @template_theme do
                    :creative -> "bg-white/20 text-white border border-white/30 hover:bg-white/30 backdrop-blur-sm"
                    :corporate -> "bg-blue-100 text-blue-600 border border-blue-200 hover:bg-blue-200"
                    :minimalist -> "bg-gray-100 text-gray-700 border border-gray-200 hover:bg-gray-200"
                  end
                ]}
              >
                <%= section.title %>
              </button>
            <% end %>
          <% end %>
        </div>
      </div>

      <!-- DYNAMIC PORTFOLIO LAYOUT SYSTEM -->
      <div class={get_portfolio_layout_class(@template_theme)}>
        <%= for section <- @sections do %>
          <%= if Map.get(section, :visible, true) do %>
            <div 
              id={"section-#{section.id}"} 
              class={[
                "portfolio-card group relative overflow-hidden transition-all duration-500 hover:scale-[1.02] hover:z-10",
                get_card_size_class(@template_theme, section.section_type),
                get_card_theme_class(@template_theme)
              ]}
            >
              
              <!-- Gradient Header -->
              <div class={["h-3 w-full", get_gradient_class(section.section_type)]}></div>
              
              <!-- Card Content -->
              <div class="p-6 lg:p-8 h-full flex flex-col">
                
                <!-- Section Header -->
                <div class="flex items-start justify-between mb-6">
                  <div class="flex items-center space-x-4">
                    <div class={[
                      "w-14 h-14 rounded-2xl flex items-center justify-center shadow-lg",
                      get_icon_bg_class(@template_theme, section.section_type)
                    ]}>
                      <%= render_section_icon(section.section_type, @template_theme) %>
                    </div>
                    <div>
                      <h3 class={["text-xl lg:text-2xl font-black", get_title_class(@template_theme)]}>
                        <%= section.title %>
                      </h3>
                      <span class={[
                        "text-xs font-bold px-3 py-1 rounded-full mt-2 inline-block",
                        get_badge_class(@template_theme, section.section_type)
                      ]}>
                        <%= format_section_type(section.section_type) %>
                      </span>
                    </div>
                  </div>
                </div>

                <!-- Section Content - Flexible Height -->
                <div class="flex-1">
                  <%= case section.section_type do %>
                    <% :featured_project -> %>
                      <%= render_featured_project_card(assigns, section) %>
                    <% :experience -> %>
                      <%= render_experience_card(assigns, section) %>
                    <% :skills -> %>
                      <%= render_skills_card(assigns, section) %>
                    <% :media_showcase -> %>
                      <%= render_media_showcase_card(assigns, section) %>
                    <% :case_study -> %>
                      <%= render_case_study_card(assigns, section) %>
                    <% :intro -> %>
                      <%= render_intro_card(assigns, section) %>
                    <% :education -> %>
                      <%= render_education_card(assigns, section) %>
                    <% _ -> %>
                      <%= render_generic_card(assigns, section) %>
                  <% end %>
                </div>
                
                <!-- Collaboration (if shared) -->
                <%= if @is_shared_view do %>
                  <div class={["mt-8 pt-6 border-t", get_border_class(@template_theme)]}>
                    <div class={["p-4 rounded-xl", get_collaboration_bg_class(@template_theme)]}>
                      <h4 class={["font-bold text-sm mb-3", get_collaboration_text_class(@template_theme)]}>
                        💬 Add Feedback
                      </h4>
                      
                      <form phx-submit="submit_feedback" class="space-y-3">
                        <input type="hidden" name="section_id" value={section.id} />
                        <textarea 
                          name="feedback" 
                          rows="2" 
                          placeholder="Your thoughts on this section..."
                          class="w-full px-3 py-2 text-sm bg-white/90 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 resize-none"
                          required
                        ></textarea>
                        <button 
                          type="submit" 
                          class={[
                            "w-full py-2 px-4 text-sm font-semibold rounded-lg transition-all duration-300",
                            get_collaboration_button_class(@template_theme)
                          ]}
                        >
                          Send Feedback
                        </button>
                      </form>
                    </div>
                  </div>
                <% end %>
              </div>
            </div>
          <% end %>
        <% end %>
      </div>
    </div>
  </div>
</div>

<!-- Combined Enhanced JavaScript for Portfolio -->
<script>
  // Global state combining both collaboration and portfolio interactions
  let portfolioState = {
    // Portfolio interaction state
    currentSection: null,
    scrollProgress: 0,
    viewStartTime: Date.now(),
    sectionsViewed: new Set(),
    interactions: {
      cardHovers: 0,
      videoPlays: 0,
      linksClicked: 0
    },
    theme: '<%= @template_theme %>',
    isSharedView: <%= @is_shared_view %>,
    
    // Collaboration state
    notes: [],
    highlights: [],
    feedbackItems: [],
    sectionsReviewed: new Set(),
    startTime: Date.now()
  };

  document.addEventListener('DOMContentLoaded', function() {
    // Initialize all systems
    initializePortfolioView();
    initializeNavigation();
    initializeCollaboration();
    setupScrollTracking();
    setupCardInteractions();
    setupVideoHandling();
    setupCollaborationFeatures();
    setupProgressTracking();
    initializeProgressTracking();
    
    // Update timer every minute
    setInterval(updateTimeSpent, 60000);
  });

  // Initialize main portfolio functionality
  function initializePortfolioView() {
    // Setup intersection observer for sections
    const sections = document.querySelectorAll('[id^="section-"]');
    const navButtons = document.querySelectorAll('nav button[data-section-id]');
    
    if ('IntersectionObserver' in window && sections.length > 0) {
      const sectionObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const sectionId = entry.target.id;
            portfolioState.currentSection = sectionId;
            portfolioState.sectionsViewed.add(sectionId);
            portfolioState.sectionsReviewed.add(sectionId);
            
            // Update navigation
            updateActiveNavButton(sectionId);
            
            // Track section view for analytics
            trackSectionView(sectionId);
            
            // Update collaboration stats if shared view
            if (portfolioState.isSharedView) {
              updateCollaborationStats();
            }
          }
        });
      }, {
        threshold: 0.4,
        rootMargin: '-10% 0px -60% 0px'
      });
      
      sections.forEach(section => sectionObserver.observe(section));
    }
    
    // Setup smooth scrolling for navigation
    setupSmoothScrolling();
  }

  // Navigation System (enhanced version)
  function initializeNavigation() {
    // Intersection Observer for active section highlighting
    const sections = document.querySelectorAll('section[id^="section-"]');
    const navButtons = document.querySelectorAll('nav button[data-section-id]');
    
    if ('IntersectionObserver' in window && sections.length > 0 && navButtons.length > 0) {
      const sectionObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const sectionId = entry.target.id;
            
            // Update active nav button
            navButtons.forEach(btn => {
              if (btn.dataset.sectionId === sectionId) {
                btn.classList.add('scale-150', 'opacity-100');
                btn.classList.remove('opacity-60');
              } else {
                btn.classList.remove('scale-150', 'opacity-100');
                btn.classList.add('opacity-60');
              }
            });
            
            // Track section as reviewed for collaboration
            if (portfolioState.isSharedView) {
              portfolioState.sectionsReviewed.add(sectionId);
              updateCollaborationStats();
            }
          }
        });
      }, {
        threshold: 0.3,
        rootMargin: '-10% 0px -60% 0px'
      });
      
      sections.forEach(section => sectionObserver.observe(section));
    }
    
    // Scroll progress tracking
    window.addEventListener('scroll', updateScrollProgress);
  }

  // Enhanced scroll tracking with progress visualization
  function setupScrollTracking() {
    let ticking = false;
    
    function updateScrollProgressEnhanced() {
      const scrollTop = window.pageYOffset;
      const docHeight = document.documentElement.scrollHeight - window.innerHeight;
      const scrollPercent = Math.min((scrollTop / docHeight) * 100, 100);
      
      portfolioState.scrollProgress = scrollPercent;
      
      // Update progress circle
      const progressCircle = document.getElementById('progress-circle');
      const progressPercent = document.getElementById('progress-percent');
      
      if (progressCircle && progressPercent) {
        const circumference = 2 * Math.PI * 28; // radius = 28
        const strokeDashoffset = circumference - (scrollPercent / 100) * circumference;
        progressCircle.style.strokeDashoffset = strokeDashoffset;
        progressPercent.textContent = Math.round(scrollPercent) + '%';
      }
      
      ticking = false;
    }
    
    window.addEventListener('scroll', function() {
      if (!ticking) {
        requestAnimationFrame(updateScrollProgressEnhanced);
        ticking = true;
      }
    });
  }

  function updateScrollProgress() {
    const scrollTop = window.pageYOffset;
    const docHeight = document.documentElement.scrollHeight - window.innerHeight;
    const scrollPercent = (scrollTop / docHeight) * 100;
    
    const progressBar = document.getElementById('scroll-progress');
    if (progressBar) {
      progressBar.style.height = Math.min(scrollPercent, 100) + '%';
    }
  }

  // Enhanced card interactions with hover analytics
  function setupCardInteractions() {
    const cards = document.querySelectorAll('.portfolio-card');
    
    cards.forEach((card, index) => {
      // Staggered entrance animation
      card.style.animationDelay = `${index * 100}ms`;
      card.classList.add('animate-fadeInUp');
      
      // Enhanced hover tracking
      card.addEventListener('mouseenter', function() {
        portfolioState.interactions.cardHovers++;
        
        // Add dynamic hover effects based on theme
        if (portfolioState.theme === 'creative') {
          this.style.transform = 'scale(1.02) translateY(-4px)';
          this.style.boxShadow = '0 25px 50px -12px rgba(0, 0, 0, 0.25)';
        }
      });
      
      card.addEventListener('mouseleave', function() {
        this.style.transform = '';
        this.style.boxShadow = '';
      });
      
      // Card click analytics
      card.addEventListener('click', function(e) {
        if (!e.target.closest('a, button, video')) {
          const sectionId = this.id;
          trackInteraction('card_click', { section: sectionId });
        }
      });
    });
  }

  // Advanced video handling with analytics
  function setupVideoHandling() {
    const videos = document.querySelectorAll('video');
    
    videos.forEach(video => {
      // Auto-play on scroll for intro videos (muted)
      if (video.id.includes('intro')) {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting && entry.intersectionRatio > 0.5) {
              video.muted = true;
              video.play().catch(() => {
                // Fallback if autoplay fails
                console.log('Autoplay prevented');
              });
            } else {
              video.pause();
            }
          });
        }, { threshold: 0.5 });
        
        observer.observe(video);
      }
      
      // Track video interactions
      video.addEventListener('play', function() {
        portfolioState.interactions.videoPlays++;
        trackInteraction('video_play', { 
          videoId: this.id || 'unknown',
          currentTime: this.currentTime 
        });
      });
      
      video.addEventListener('ended', function() {
        trackInteraction('video_complete', { 
          videoId: this.id || 'unknown',
          duration: this.duration 
        });
      });
    });
  }

  // Collaboration Features (enhanced)
  function initializeCollaboration() {
    if (!portfolioState.isSharedView) return;
    
    // Setup text selection for highlighting
    document.addEventListener('mouseup', handleTextSelection);
    
    // Setup collaboration sidebar interactions
    const sidebar = document.getElementById('collaboration-sidebar');
    if (sidebar) {
      sidebar.addEventListener('mouseenter', () => {
        sidebar.classList.remove('-translate-x-full');
      });
      
      sidebar.addEventListener('mouseleave', () => {
        sidebar.classList.add('-translate-x-full');
      });
    }
  }

  function setupCollaborationFeatures() {
    if (!portfolioState.isSharedView) return;
    
    // Text selection highlighting
    document.addEventListener('mouseup', handleTextSelection);
    
    // Feedback form enhancements
    const feedbackForms = document.querySelectorAll('form[phx-submit="submit_feedback"]');
    feedbackForms.forEach(form => {
      const textarea = form.querySelector('textarea');
      if (textarea) {
        // Auto-resize textarea
        textarea.addEventListener('input', function() {
          this.style.height = 'auto';
          this.style.height = (this.scrollHeight) + 'px';
        });
        
        // Save draft locally
        textarea.addEventListener('input', debounce(function() {
          const sectionId = form.querySelector('input[name="section_id"]').value;
          localStorage.setItem(`feedback_draft_${sectionId}`, this.value);
        }, 500));
        
        // Load saved draft
        const sectionId = form.querySelector('input[name="section_id"]').value;
        const savedDraft = localStorage.getItem(`feedback_draft_${sectionId}`);
        if (savedDraft) {
          textarea.value = savedDraft;
          textarea.style.height = (textarea.scrollHeight) + 'px';
        }
      }
    });
  }

  function handleTextSelection() {
    const selection = window.getSelection();
    if (selection.toString().length > 10) {
      const selectedText = selection.toString();
      const range = selection.getRangeAt(0);
      const rect = range.getBoundingClientRect();
      
      // Show highlight tooltip
      showHighlightTooltip(rect, selectedText);
      console.log('Text selected for highlighting:', selection.toString());
    }
  }

  function showHighlightTooltip(rect, text) {
    // Remove existing tooltip
    const existingTooltip = document.getElementById('highlight-tooltip');
    if (existingTooltip) {
      existingTooltip.remove();
    }
    
    const tooltip = document.createElement('div');
    tooltip.id = 'highlight-tooltip';
    tooltip.className = 'fixed z-50 bg-yellow-400 text-black px-3 py-2 rounded-lg shadow-lg text-sm font-semibold';
    tooltip.style.left = `${rect.left + rect.width / 2}px`;
    tooltip.style.top = `${rect.top - 40}px`;
    tooltip.style.transform = 'translateX(-50%)';
    tooltip.innerHTML = `
      <button onclick="saveHighlight('${text.replace(/'/g, "\\'")}')">
        💡 Highlight This
      </button>
    `;
    
    document.body.appendChild(tooltip);
    
    // Remove after 3 seconds
    setTimeout(() => {
      tooltip.remove();
    }, 3000);
  }

  function saveHighlight(text) {
    const highlight = {
      id: Date.now(),
      text: text,
      timestamp: new Date().toISOString(),
      section: getCurrentSection()
    };
    
    portfolioState.highlights.push(highlight);
    portfolioState.feedbackItems.push({
      type: 'highlight',
      content: highlight.text,
      section: highlight.section,
      timestamp: highlight.timestamp
    });
    
    updateCollaborationStats();
    trackInteraction('text_highlight', { text: text });
    showToast('Text highlighted!', 'success');
    document.getElementById('highlight-tooltip')?.remove();
  }

  function saveQuickNote() {
    const noteText = document.getElementById('quick-note');
    if (noteText && noteText.value.trim()) {
      const note = {
        id: Date.now(),
        text: noteText.value.trim(),
        timestamp: new Date().toISOString(),
        section: getCurrentSection()
      };
      
      portfolioState.notes.push(note);
      portfolioState.feedbackItems.push({
        type: 'note',
        content: note.text,
        section: note.section,
        timestamp: note.timestamp
      });
      
      // Clear the input
      noteText.value = '';
      
      // Update UI
      updateCollaborationStats();
      
      // Show success feedback
      showToast('Note saved successfully!', 'success');
    }
  }

  function highlightText() {
    const selection = window.getSelection();
    if (selection.toString().length > 0) {
      const highlight = {
        id: Date.now(),
        text: selection.toString(),
        timestamp: new Date().toISOString(),
        section: getCurrentSection()
      };
      
      portfolioState.highlights.push(highlight);
      portfolioState.feedbackItems.push({
        type: 'highlight',
        content: highlight.text,
        section: highlight.section,
        timestamp: highlight.timestamp
      });
      
      updateCollaborationStats();
      showToast('Text highlighted!', 'success');
    } else {
      showToast('Please select text to highlight', 'warning');
    }
  }

  function getCurrentSection() {
    const sections = document.querySelectorAll('section[id^="section-"]');
    for (const section of sections) {
      const rect = section.getBoundingClientRect();
      if (rect.top <= window.innerHeight / 2 && rect.bottom >= window.innerHeight / 2) {
        return section.id;
      }
    }
    return 'unknown';
  }

  function updateCollaborationStats() {
    // Update notes count
    const notesCount = document.getElementById('notes-count');
    if (notesCount) {
      notesCount.textContent = portfolioState.notes.length;
    }
    
    // Update highlights count
    const highlightsCount = document.getElementById('highlights-count');
    if (highlightsCount) {
      highlightsCount.textContent = portfolioState.highlights.length;
    }
    
    // Update total feedback count
    const totalFeedbackCount = document.getElementById('total-feedback-count');
    if (totalFeedbackCount) {
      totalFeedbackCount.textContent = portfolioState.feedbackItems.length;
    }
    
    // Update sections reviewed
    const sectionsReviewed = document.getElementById('sections-reviewed');
    if (sectionsReviewed) {
      sectionsReviewed.textContent = portfolioState.sectionsReviewed.size;
    }
  }

  function updateTimeSpent() {
    const timeSpent = Math.floor((Date.now() - portfolioState.startTime) / 60000);
    const timeElement = document.getElementById('time-spent');
    if (timeElement) {
      timeElement.textContent = timeSpent;
    }
  }

  // Progress tracking and analytics
  function setupProgressTracking() {
    // Track time spent in each section
    let sectionStartTime = Date.now();
    let currentSection = null;
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Track time spent in previous section
          if (currentSection && sectionStartTime) {
            const timeSpent = Date.now() - sectionStartTime;
            trackInteraction('section_time', {
              section: currentSection,
              timeSpent: timeSpent
            });
          }
          
          currentSection = entry.target.id;
          sectionStartTime = Date.now();
        }
      });
    }, { threshold: 0.5 });
    
    document.querySelectorAll('[id^="section-"]').forEach(section => {
      observer.observe(section);
    });
    
    // Track page exit
    window.addEventListener('beforeunload', function() {
      if (currentSection && sectionStartTime) {
        const timeSpent = Date.now() - sectionStartTime;
        trackInteraction('section_time', {
          section: currentSection,
          timeSpent: timeSpent
        });
      }
      
      // Track total session
      trackInteraction('session_end', {
        totalTime: Date.now() - portfolioState.viewStartTime,
        sectionsViewed: Array.from(portfolioState.sectionsViewed),
        interactions: portfolioState.interactions
      });
    });
  }

  function initializeProgressTracking() {
    // Track reading progress for analytics
    const sections = document.querySelectorAll('section[id^="section-"]');
    const progressObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          console.log('Viewing section:', entry.target.id);
        }
      });
    }, { threshold: 0.5 });
    
    sections.forEach(section => progressObserver.observe(section));
  }

  function exportFeedback() {
    const feedbackData = {
      portfolioId: '<%= @portfolio.id %>',
      shareToken: '<%= if @is_shared_view, do: Map.get(@share, "token", ""), else: "" %>',
      reviewer: '<%= if @is_shared_view, do: Map.get(@share, "name", "Anonymous"), else: "" %>',
      notes: portfolioState.notes,
      highlights: portfolioState.highlights,
      sectionsReviewed: Array.from(portfolioState.sectionsReviewed),
      timeSpent: Math.floor((Date.now() - portfolioState.startTime) / 60000),
      timestamp: new Date().toISOString()
    };
    
    // Create and download JSON file
    const dataStr = JSON.stringify(feedbackData, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    const url = URL.createObjectURL(dataBlob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `portfolio-feedback-${Date.now()}.json`;
    link.click();
    
    URL.revokeObjectURL(url);
    showToast('Feedback exported successfully!', 'success');
  }

  function submitAllFeedback() {
    if (portfolioState.feedbackItems.length === 0) {
      showToast('No feedback to submit', 'warning');
      return;
    }
    
    // In a real implementation, this would send feedback via LiveView
    console.log('Submitting feedback:', portfolioState.feedbackItems);
    
    showToast('Feedback submitted successfully!', 'success');
    
    // Clear collaboration state
    portfolioState.feedbackItems = [];
    portfolioState.notes = [];
    portfolioState.highlights = [];
    updateCollaborationStats();
  }

  // Utility functions
  function updateActiveNavButton(sectionId) {
    const navButtons = document.querySelectorAll('nav button[data-section-id]');
    navButtons.forEach(btn => {
      if (btn.dataset.sectionId === sectionId) {
        btn.classList.add('scale-150', 'opacity-100');
        btn.classList.remove('opacity-60');
      } else {
        btn.classList.remove('scale-150', 'opacity-100');
        btn.classList.add('opacity-60');
      }
    });
  }

  function setupSmoothScrolling() {
    // Enhanced smooth scrolling with easing
    const scrollButtons = document.querySelectorAll('[onclick*="scrollIntoView"]');
    scrollButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const targetId = this.getAttribute('onclick').match(/getElementById\(['"]([^'"]+)['"]\)/)?.[1];
        if (targetId) {
          const target = document.getElementById(targetId);
          if (target) {
            target.scrollIntoView({ 
              behavior: 'smooth',
              block: 'start'
            });
          }
        }
      });
    });
  }

  function trackInteraction(type, data) {
    // Send analytics event (implement based on your analytics system)
    console.log('Portfolio Interaction:', { type, data, timestamp: Date.now() });
    
    // For shared portfolios, could send to collaboration system
    if (portfolioState.isSharedView) {
      // Could trigger LiveView events here
      // window.liveSocket?.pushEvent('track_interaction', { type, data });
    }
  }

  function trackSectionView(sectionId) {
    trackInteraction('section_view', { 
      section: sectionId,
      scrollProgress: portfolioState.scrollProgress
    });
  }

  function sharePortfolio() {
    const url = window.location.href;
    
    if (navigator.share) {
      navigator.share({
        title: document.title,
        url: url
      }).then(() => {
        trackInteraction('portfolio_shared', { method: 'native' });
      });
    } else if (navigator.clipboard) {
      navigator.clipboard.writeText(url).then(() => {
        showToast('Portfolio URL copied to clipboard!', 'success');
        trackInteraction('portfolio_shared', { method: 'clipboard' });
      });
    }
  }

  function showToast(message, type = 'info') {
    const existingToast = document.getElementById('toast-notification');
    if (existingToast) {
      existingToast.remove();
    }
    
    const toast = document.createElement('div');
    toast.id = 'toast-notification';
    
    const colors = {
      success: 'bg-green-500',
      error: 'bg-red-500',
      warning: 'bg-yellow-500',
      info: 'bg-blue-500'
    };
    
    toast.className = `fixed bottom-4 right-4 ${colors[type]} text-white px-6 py-3 rounded-xl shadow-2xl z-50 transform translate-y-full transition-all duration-300 font-semibold`;
    toast.textContent = message;
    
    document.body.appendChild(toast);
    
    // Animate in
    requestAnimationFrame(() => {
      toast.classList.remove('translate-y-full');
    });
    
    // Animate out and remove
    setTimeout(() => {
      toast.classList.add('translate-y-full');
      setTimeout(() => {
        toast.remove();
      }, 300);
    }, 4000);
  }

  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  // Export functions for LiveView integration
  window.portfolioHelpers = {
    trackInteraction,
    showToast,
    sharePortfolio,
    updateCollaborationStats,
    saveQuickNote,
    highlightText,
    exportFeedback,
    submitAllFeedback
  };
</script>

<!-- Combined Enhanced CSS Styles -->
<style>
  /* CREATIVE THEME - Pinterest/Masonry Style */
  .creative-layout {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
    align-items: start;
  }

  @media (min-width: 768px) {
    .creative-layout {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (min-width: 1024px) {
    .creative-layout {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @media (min-width: 1536px) {
    .creative-layout {
      grid-template-columns: repeat(4, 1fr);
    }
  }

  /* CORPORATE THEME - Structured Dashboard */
  .corporate-layout {
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    gap: 2rem;
    align-items: start;
  }

  .corporate-layout .featured-card {
    grid-column: span 8;
  }

  .corporate-layout .standard-card {
    grid-column: span 4;
  }

  .corporate-layout .wide-card {
    grid-column: span 6;
  }

  @media (max-width: 1023px) {
    .corporate-layout {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .corporate-layout .featured-card,
    .corporate-layout .standard-card,
    .corporate-layout .wide-card {
      grid-column: span 1;
    }
  }

  @media (max-width: 767px) {
    .corporate-layout {
      grid-template-columns: 1fr;
    }
  }

  /* MINIMALIST THEME - Clean Grid */
  .minimalist-layout {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 3rem;
    align-items: start;
  }

  /* Dynamic Card Sizing */
  .creative-featured-project,
  .creative-case-study,
  .creative-media-showcase {
    grid-row: span 2;
    min-height: 600px;
  }

  .creative-intro,
  .creative-experience {
    min-height: 500px;
  }

  .creative-skills,
  .creative-education {
    min-height: 400px;
  }

  /* Enhanced Card Animations */
  .portfolio-card {
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: transform;
  }

  .portfolio-card:hover {
    transform: translateY(-12px) scale(1.03);
    z-index: 10;
  }

  /* Responsive Card Heights */
  @media (max-width: 767px) {
    .portfolio-card {
      min-height: 300px !important;
    }
    
    .creative-featured-project,
    .creative-case-study,
    .creative-media-showcase {
      grid-row: span 1;
      min-height: 400px;
    }
  }

  /* Gradient Headers by Section Type */
  .gradient-header-featured {
    background: linear-gradient(135deg, #f59e0b 0%, #ec4899 100%);
  }

  .gradient-header-experience {
    background: linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%);
  }

  .gradient-header-skills {
    background: linear-gradient(135deg, #06b6d4 0%, #3b82f6 100%);
  }

  .gradient-header-media {
    background: linear-gradient(135deg, #8b5cf6 0%, #6366f1 100%);
  }

  .gradient-header-case-study {
    background: linear-gradient(135deg, #ec4899 0%, #8b5cf6 100%);
  }

  .gradient-header-default {
    background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
  }

  /* Base animations */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-fadeInUp {
    animation: fadeInUp 0.6s ease-out forwards;
  }

  /* Smooth scrolling for the entire page */
  html {
    scroll-behavior: smooth;
  }
  
  /* Enhanced navigation dot animations */
  nav button[data-section-id] {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  nav button[data-section-id]:hover {
    transform: scale(1.25);
  }
  
  /* Collaboration sidebar animations */
  #collaboration-sidebar {
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  /* Text selection highlighting */
  ::selection {
    background-color: rgba(255, 235, 59, 0.3);
  }
  
  ::-moz-selection {
    background-color: rgba(255, 235, 59, 0.3);
  }
  
  /* Enhanced button interactions */
  button {
    transition: all 0.2s ease;
    will-change: transform;
  }
  
  button:active {
    transform: scale(0.98);
  }

  /* Enhanced scrollbar styling */
  ::-webkit-scrollbar {
    width: 8px;
  }
  
  ::-webkit-scrollbar-track {
    background: <%= if @template_theme == :creative do %>rgba(255, 255, 255, 0.1)<% else %>rgba(0, 0, 0, 0.1)<% end %>;
  }
  
  ::-webkit-scrollbar-thumb {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
  }

  /* Card hover enhancements */
  .portfolio-card {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: transform;
  }
  
  .portfolio-card:hover {
    will-change: transform;
  }

  /* Video overlay enhancements */
  video {
    transition: transform 0.3s ease;
  }
  
  video:hover {
    transform: scale(1.02);
  }

  /* Progress ring animation */
  #progress-circle {
    transition: stroke-dashoffset 0.3s ease;
    transform-origin: center;
  }
  
  /* Loading states */
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  
  /* Enhanced focus states for accessibility */
  button:focus-visible,
  textarea:focus-visible,
  input:focus-visible {
    outline: 2px solid #667eea;
    outline-offset: 2px;
    box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
  }
  
  /* Smooth transitions for all interactive elements */
  .section-card,
  .group,
  nav,
  footer {
    transition: all 0.3s ease;
  }

  /* Loading states */
  .loading-shimmer {
    background: linear-gradient(90deg, 
      rgba(255, 255, 255, 0) 0%, 
      rgba(255, 255, 255, 0.2) 50%, 
      rgba(255, 255, 255, 0) 100%);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
  }
  
  @keyframes shimmer {
    0% { background-position: -200% 0; }
    100% { background-position: 200% 0; }
  }

  /* Video loading states */
  .video-loaded .absolute.inset-0.bg-black\/80 {
    display: none;
  }
  
  /* Enhanced hover animations */
  .group:hover .transform {
    transform: scale(1.02);
  }

  /* Responsive enhancements */
  @media (max-width: 768px) {
    .portfolio-masonry-grid {
      gap: 1rem;
    }
    
    .portfolio-card {
      margin-bottom: 1rem;
    }
  }

  /* Print styles for resume export */
  @media print {
    .portfolio-card {
      break-inside: avoid;
      page-break-inside: avoid;
    }
    
    nav, 
    .fixed,
    .sticky,
    button:not(.print-button) {
      display: none !important;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .portfolio-card {
      border: 2px solid currentColor;
    }
    
    button {
      border: 2px solid currentColor;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01s !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01s !important;
    }
    
    html {
      scroll-behavior: auto;
    }
  }

  /* Dark mode preparation */
  @media (prefers-color-scheme: dark) {
    :root {
      --text-primary: #ffffff;
      --text-secondary: rgba(255, 255, 255, 0.8);
      --bg-primary: #1a1a1a;
      --bg-secondary: #2a2a2a;
    }
  }
</style>