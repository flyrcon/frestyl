# lib/frestyl_web/controllers/channel_html/form.html.heex
<.simple_form :let={f} for={@changeset} action={@action}>
  <.error :if={@changeset.action}>
    Oops, something went wrong! Please check the errors below.
  </.error>
  
  <div class="space-y-6">
    <div>
      <.input field={f[:name]} type="text" label="Channel Name" required />
    </div>
    
    <div>
      <.input field={f[:description]} type="textarea" label="Description" />
    </div>
    
    <div>
      <.input field={f[:is_public]} type="checkbox" label="Make this channel public" />
      <p class="mt-1 text-sm text-gray-500">
        Public channels are visible to everyone. Private channels are only visible to members.
      </p>
    </div>
    
    <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
      <div class="sm:col-span-3">
        <.input field={f[:primary_color]} type="color" label="Primary Color" />
      </div>
      
      <div class="sm:col-span-3">
        <.input field={f[:secondary_color]} type="color" label="Secondary Color" />
      </div>
    </div>
    
    <div>
      <.input field={f[:logo_url]} type="text" label="Logo URL" />
      <p class="mt-1 text-sm text-gray-500">
        Provide a URL to your logo image. Square images (e.g., 512x512) work best.
      </p>
    </div>
    
    <div>
      <.input field={f[:category]} type="select" label="Category" options={@categories} prompt="Select a category" />
    </div>
    
    <div>
      <label class="block text-sm font-medium text-gray-700">Tags</label>
      <div class="mt-1">
        <input
          type="text"
          name="tags_input"
          id="tags_input"
          class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
          placeholder="Add tags separated by commas"
        />
        <%= for tag <- input_value(f, :tags) || [] do %>
          <input type="hidden" name="channel[tags][]" value={tag} />
        <% end %>
      </div>
      <div id="tags_container" class="mt-2 flex flex-wrap gap-2">
        <%= for tag <- input_value(f, :tags) || [] do %>
          <span class="inline-flex items-center rounded-full bg-indigo-100 py-0.5 pl-2 pr-0.5 text-xs font-medium text-indigo-700">
            <%= tag %>
            <button type="button" class="ml-0.5 inline-flex h-4 w-4 flex-shrink-0 items-center justify-center rounded-full text-indigo-400 hover:bg-indigo-200 hover:text-indigo-500 focus:bg-indigo-500 focus:text-white focus:outline-none">
              <span class="sr-only">Remove tag</span>
              <svg class="h-2 w-2" stroke="currentColor" fill="none" viewBox="0 0 8 8">
                <path stroke-linecap="round" stroke-width="1.5" d="M1 1l6 6m0-6L1 7" />
              </svg>
            </button>
          </span>
        <% end %>
      </div>
    </div>
  </div>
  
  <:actions>
    <.button type="submit" class="w-full">
      <%= @button_label %>
    </.button>
  </:actions>
</.simple_form>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    const tagsInput = document.getElementById("tags_input");
    const tagsContainer = document.getElementById("tags_container");
    
    // Handle tag input
    tagsInput.addEventListener("keydown", function(e) {
      if (e.key === "Enter" || e.key === ",") {
        e.preventDefault();
        const value = tagsInput.value.trim();
        
        if (value) {
          // Create tag element
          const tagSpan = document.createElement("span");
          tagSpan.className = "inline-flex items-center rounded-full bg-indigo-100 py-0.5 pl-2 pr-0.5 text-xs font-medium text-indigo-700";
          tagSpan.innerHTML = `
            ${value}
            <button type="button" class="ml-0.5 inline-flex h-4 w-4 flex-shrink-0 items-center justify-center rounded-full text-indigo-400 hover:bg-indigo-200 hover:text-indigo-500 focus:bg-indigo-500 focus:text-white focus:outline-none">
              <span class="sr-only">Remove tag</span>
              <svg class="h-2 w-2" stroke="currentColor" fill="none" viewBox="0 0 8 8">
                <path stroke-linecap="round" stroke-width="1.5" d="M1 1l6 6m0-6L1 7" />
              </svg>
            </button>
          `;
          
          // Create hidden input for the tag
          const hiddenInput = document.createElement("input");
          hiddenInput.type = "hidden";
          hiddenInput.name = "channel[tags][]";
          hiddenInput.value = value;
          
          // Add remove tag functionality
          const removeButton = tagSpan.querySelector("button");
          removeButton.addEventListener("click", function() {
            tagSpan.remove();
            hiddenInput.remove();
          });
          
          // Append to the DOM
          tagsContainer.appendChild(tagSpan);
          tagsContainer.appendChild(hiddenInput);
          
          // Clear input
          tagsInput.value = "";
        }
      }
    });
    
    // Let's also add color preview functionality
    const primaryColorInput = document.querySelector('[name="channel[primary_color]"]');
    const secondaryColorInput = document.querySelector('[name="channel[secondary_color]"]');
    
    // Add a color preview div after each color input
    if (primaryColorInput) {
      const previewDiv = document.createElement("div");
      previewDiv.className = "mt-1 h-8 w-full rounded border";
      previewDiv.style.backgroundColor = primaryColorInput.value;
      primaryColorInput.parentNode.insertBefore(previewDiv, primaryColorInput.nextSibling);
      
      primaryColorInput.addEventListener("input", function() {
        previewDiv.style.backgroundColor = primaryColorInput.value;
      });
    }
    
    if (secondaryColorInput) {
      const previewDiv = document.createElement("div");
      previewDiv.className = "mt-1 h-8 w-full rounded border";
      previewDiv.style.backgroundColor = secondaryColorInput.value;
      secondaryColorInput.parentNode.insertBefore(previewDiv, secondaryColorInput.nextSibling);
      
      secondaryColorInput.addEventListener("input", function() {
        previewDiv.style.backgroundColor = secondaryColorInput.value;
      });
    }
  });
</script>